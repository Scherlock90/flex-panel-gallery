{"version":3,"sources":["FlexComponents/Images sync /^/.*$","FlexComponents/Images/branicki.jpg","FlexComponents/Images/roadTorun.jpg","FlexComponents/Images/sliwnoKladki.jpg","FlexComponents/Images/sopotMolo.jpg","Footer.js","FlexComponents/Flex-panel-gallery.js","App.js","serviceWorker.js","index.js"],"names":["map","./branicki.jpg","./roadTorun.jpg","./sliwnoKladki.jpg","./sopotMolo.jpg","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","p","footerStyle","textAlign","color","padding","width","titleStyle","borderRadius","fontWeight","fontSize","zIndex","position","textDecoration","Footer","react_default","a","createElement","style","href","dataImage","name","img","FlexPanelGallery","_useState","useState","_useState2","slicedToArray","imagesToGallery","className","i","Flex_panel_gallery_ImageThumb","key","ImageThumb","props","src","require","alt","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAA,IAAAA,EAAA,CACAC,iBAAA,GACAC,kBAAA,GACAC,qBAAA,GACAC,kBAAA,IAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAC,EAAAP,EAAAM,GACA,KAAAC,EAAA,IACA,IAAAG,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAEA,MADAI,EAAAE,KAAA,mBACAF,EAEA,OAAAH,EAEAF,EAAAQ,KAAA,WACA,OAAAC,OAAAD,KAAAb,IAEAK,EAAAU,QAAAP,EACAQ,EAAAC,QAAAZ,EACAA,EAAAE,GAAA,oBC1BAS,EAAAC,QAAiBR,EAAAS,EAAuB,sDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,uDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,0DCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,+GCElCC,EAAc,CAChBC,UAAW,SACXC,MAAO,oBACPC,QAAS,cACTC,MAAO,QAELC,EAAa,CACfD,MAAO,OACPE,aAAc,KACdC,WAAY,MACZC,SAAU,OACVC,OAAQ,MACRC,SAAU,WACVC,eAAgB,QAGL,SAASC,IACpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAOhB,GACRa,EAAAC,EAAAC,cAAA,KAAGC,MAAOX,EAAYY,KAAK,oBAA3B,6BClBNC,SAAY,CAChB,CACEC,KAAM,iCACNC,IAAK,gBAEP,CACED,KAAM,sBACNC,IAAK,iBAEP,CACED,KAAM,6BACNC,IAAK,oBAEP,CACED,KAAM,gBACNC,IAAK,mBAIM,SAASC,IAAoB,IAAAC,EACMC,mBAASL,GADfM,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA2B,EAAA,GACjCI,EADiCF,EAAA,GAAAA,EAAA,GAG1C,OACEX,EAAAC,EAAAC,cAAA,OAAKY,UAAU,aACZD,EAAgB7C,IAAI,SAACuC,EAAKQ,GAAN,OACnBf,EAAAC,EAAAC,cAACc,EAAD,CAAYT,IAAKA,EAAIA,IAAKU,IAAKF,EAAGT,KAAMC,EAAID,UAMpD,IAAMY,EAAa,SAACC,GAAD,OACjBnB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,aACbd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,OAAKkB,IAAKC,MAAQ,KAAcF,EAAMZ,KAAMe,IAAKH,EAAMb,QAEzDN,EAAAC,EAAAC,cAAA,OAAKY,UAAU,cAAcK,EAAMb,QCnCjCiB,EAAQ,CACZ5B,SAAU,OACVP,UAAW,SACXE,QAAS,MACTD,MAAO,WCIWmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO9B,EAAAC,EAAAC,cFKD,WACb,OACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAMC,MAAOoB,GAAb,sBACAvB,EAAAC,EAAAC,cAACM,EAAD,MACAR,EAAAC,EAAAC,cAACH,EAAD,QEVU,MAASgC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.62669dea.chunk.js","sourcesContent":["var map = {\n\t\"./branicki.jpg\": 12,\n\t\"./roadTorun.jpg\": 13,\n\t\"./sliwnoKladki.jpg\": 14,\n\t\"./sopotMolo.jpg\": 15\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 11;","module.exports = __webpack_public_path__ + \"static/media/branicki.b5f606cd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/roadTorun.d52ffd65.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sliwnoKladki.a6e488c2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sopotMolo.b9370156.jpg\";","import React from 'react';\r\n\r\nconst footerStyle = {\r\n    textAlign: 'center',\r\n    color: 'rgb(21, 101, 192)',\r\n    padding: '2em 0 2em 0',\r\n    width: 'auto'\r\n}\r\nconst titleStyle = {\r\n    width: 'auto',\r\n    borderRadius: '5%',\r\n    fontWeight: '600',\r\n    fontSize: '20px',\r\n    zIndex: '100',\r\n    position: 'relative',\r\n    textDecoration: 'none'\r\n}\r\n\r\nexport default function Footer () {\r\n    return (\r\n        <div style={footerStyle}>\r\n            <a style={titleStyle} href=\"http://senjs.eu/\"> Designed SeN</a> \r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './main.css';\r\n\r\nconst dataImage = [\r\n  {\r\n    name: 'Branicki Letniskowy Pałac',\r\n    img: 'branicki.jpg'\r\n  },\r\n  { \r\n    name: 'W drodze do Torunia',\r\n    img: 'roadTorun.jpg'\r\n  },\r\n  {\r\n    name: 'Kładki w Śliwnie',\r\n    img: 'sliwnoKladki.jpg'\r\n  },\r\n  {\r\n    name: 'Sopockie Molo',\r\n    img: 'sopotMolo.jpg'\r\n  }\r\n]\r\n\r\nexport default function FlexPanelGallery () {\r\n    const [imagesToGallery, setImagesToGallery] = useState(dataImage);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {imagesToGallery.map((img, i)=> (\r\n        <ImageThumb img={img.img} key={i} name={img.name} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ImageThumb = (props) => (\r\n  <div className=\"cardImage\">\r\n    <div className=\"box\">\r\n      <img src={require('./Images/' + props.img)} alt={props.name} />\r\n    </div>\r\n    <div className=\"thumbTitle\">{props.name}</div>\r\n  </div>\r\n);","import React, { Component } from 'react';\nimport Footer from './Footer';\nimport FlexPanelGallery from './FlexComponents/Flex-panel-gallery';\n\nconst title = {\n  fontSize: '40px',\n  textAlign: 'center',\n  padding: '2em',\n  color: '#039be5'\n}\nexport default function App () {\n  return (\n    <div>\n      <div  style={title}>Flex Panel Gallery</div>\n      <FlexPanelGallery />\n      <Footer />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Footer.js","FlexComponents/Flex-panel-gallery.js","App.js","serviceWorker.js","index.js","FlexComponents/Images sync /^/.*$","FlexComponents/Images/branicki.jpg","FlexComponents/Images/roadTorun.jpg","FlexComponents/Images/sliwnoKladki.jpg","FlexComponents/Images/sopotMolo.jpg"],"names":["footerStyle","textAlign","color","padding","width","titleStyle","borderRadius","fontWeight","fontSize","zIndex","textDecoration","Footer","react_default","a","createElement","style","href","ReactModal","setAppElement","dataImage","id","name","img","buttonStyle","FlexPanelGallery","_useState","useState","imagesToGallery","Object","slicedToArray","_useState3","_useState4","grayscale","setGrayscale","_useState5","_useState6","modalMainOpen","setModalMainOpen","_useState7","_useState8","pic","setPic","_useState9","_useState10","setName","makeGrey","filter","concat","closeModal","className","map","i","Flex_panel_gallery_ImageThumb","key","onActivePhoto","e","require","console","log","Button_default","variant","onClick","lib_default","isOpen","contentLabel","onRequestClose","overlayClassName","src","ImageThumb","props","alt","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","./branicki.jpg","./roadTorun.jpg","./sliwnoKladki.jpg","./sopotMolo.jpg","webpackContext","req","webpackContextResolve","__webpack_require__","Error","code","keys","resolve","module","exports","p"],"mappings":"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","file":"static/js/main.4d5aab36.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst footerStyle = {\r\n    textAlign: 'center',\r\n    color: 'rgb(21, 101, 192)',\r\n    padding: '2em 0 2em 0',\r\n    width: 'auto'\r\n}\r\nconst titleStyle = {\r\n    width: 'auto',\r\n    borderRadius: '5%',\r\n    fontWeight: '600',\r\n    fontSize: '20px',\r\n    zIndex: '100',\r\n    textDecoration: 'none'\r\n}\r\n\r\nexport default function Footer () {\r\n    return (\r\n        <div style={footerStyle}>\r\n            <a style={titleStyle} href=\"http://senjs.eu/\"> Designed SeN</a> \r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport ReactModal from 'react-modal';\r\nimport Button from '@material-ui/core/Button';\r\nimport './main.css';\r\nReactModal.setAppElement('#root2');\r\nconst dataImage = [\r\n  {\r\n    id: 1,\r\n    name: 'Branickich Pałac',\r\n    img: 'branicki.jpg'\r\n  },\r\n  { \r\n    id: 2,\r\n    name: 'Kujawsko-Pomorskie',\r\n    img: 'roadTorun.jpg'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Narwiański Narodowy Park',\r\n    img: 'sliwnoKladki.jpg'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Sopockie Molo',\r\n    img: 'sopotMolo.jpg'\r\n  }\r\n]\r\nconst buttonStyle ={\r\n  padding : '3em 0 0 0'\r\n}\r\n\r\nexport default function FlexPanelGallery () {\r\n    const [imagesToGallery] = useState(dataImage);\r\n    const [grayscale, setGrayscale] = useState(0);\r\n    const [modalMainOpen, setModalMainOpen] = useState(false);\r\n    const [pic, setPic] = useState('');\r\n    const [name, setName] = useState('');\r\n    const makeGrey = {\r\n      filter: `grayscale(${grayscale})`\r\n    }\r\n    function toggleModal (name, pic) {\r\n      setModalMainOpen(true)\r\n      setName(name);\r\n      setPic(require('./Images/'+ pic));      \r\n      console.log('That is pass! ' + pic)\r\n      return pic\r\n    } \r\n    function closeModal(modalMainOpen) {\r\n      setModalMainOpen(false)\r\n      setGrayscale(0);\r\n      return modalMainOpen\r\n    }   \r\n \r\n  return (\r\n    <div>\r\n      <div className=\"container\" style={makeGrey}>        \r\n        {imagesToGallery.map((img, i)=> (\r\n          <ImageThumb \r\n            img={img.img} \r\n            key={i} \r\n            name={img.name} \r\n            onActivePhoto={e => toggleModal(img.name, img.img)}\r\n          />\r\n        ))}    \r\n      </div>\r\n      <div style={buttonStyle}>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={() => setGrayscale(4)} >Grayscale</Button>\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={() => setGrayscale(0)} >Normal</Button>\r\n      </div>\r\n      <ReactModal \r\n        isOpen={modalMainOpen}\r\n        contentLabel=\"onRequestClose Example\"\r\n        onRequestClose={closeModal}          \r\n        className=\"Modal\"\r\n        overlayClassName=\"Overlay\"\r\n      >      \r\n        <div className=\"containerModal\">\r\n          <div className=\"containerMyModal\" >\r\n            <div className=\"cardImage\">\r\n              <div className=\"box\">\r\n                <img  style={makeGrey}className=\"imgModal\" src={pic} />                \r\n              </div>              \r\n            </div> \r\n            <div className=\"littleContainerName\">\r\n              <div className=\"nameModalImage\">\r\n                {name} \r\n              </div>                   \r\n            </div>             \r\n          </div>  \r\n        </div>   \r\n        <div style={buttonStyle}>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={() => setGrayscale(4)} >Grayscale</Button>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={() => setGrayscale(0)} >Normal</Button>\r\n          <Button variant=\"contained\" color=\"secondary\" onClick={closeModal} >Close Modal</Button>\r\n        </div>                  \r\n      </ReactModal>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ImageThumb = (props) => (\r\n    <div className=\"cardImage\">\r\n      <div className=\"box\">\r\n        <img src={require('./Images/' + props.img)} alt={props.name} onClick={props.onActivePhoto} />\r\n      </div>\r\n      <div className=\"thumbTitle\">{props.name}</div> \r\n    </div> \r\n);\r\n","import React from 'react';\r\nimport Footer from './Footer';\r\nimport FlexPanelGallery from './FlexComponents/Flex-panel-gallery';\r\n\r\nconst title = {\r\n  fontSize: '40px',\r\n  textAlign: 'center',\r\n  padding: '2em',\r\n  color: '#039be5'\r\n}\r\nexport default function App () {\r\n  return (\r\n    <div>\r\n      <div  style={title}>Flex Panel Gallery</div>\r\n      <FlexPanelGallery />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n","var map = {\n\t\"./branicki.jpg\": 68,\n\t\"./roadTorun.jpg\": 69,\n\t\"./sliwnoKladki.jpg\": 70,\n\t\"./sopotMolo.jpg\": 71\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 37;","module.exports = __webpack_public_path__ + \"static/media/branicki.b5f606cd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/roadTorun.d52ffd65.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sliwnoKladki.a6e488c2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sopotMolo.b9370156.jpg\";"],"sourceRoot":""}